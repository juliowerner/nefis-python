import logging
import os
import tempfile

import numpy as np
import pytest

import nefis.cnefis

logger = logging.getLogger(__name__)


def log_error(status):
    if status:
        status, msg = nefis.cnefis.neferr()
        logger.error("Nefis error: %s", msg)

@pytest.fixture()
def nefis_file():
    _, base = tempfile.mkstemp()
    dat_file = base + '.dat'
    def_file = base + '.def'
    coding = ' '
    ac_type = 'c'
    fp = -1
    error, fp = nefis.cnefis.crenef(dat_file, def_file, coding, ac_type)
    log_error(error)
    logger.debug("yielding fp %s for %s", fp, dat_file)
    yield fp  # provide the fixture value
    logger.debug("tearing down %s", dat_file)
    os.unlink(dat_file)
    os.unlink(def_file)


def test_get_version():
    error, version = nefis.cnefis.getnfv()
    log_error(error)
    assert error == 0, "getnfc should return error 0"


def test_crenef():
    """test creating a file"""
    dat_file = 'attributes.dat'
    def_file = 'attributes.def'
    coding = ' '
    ac_type = 'c'
    fp = -1
    error, fp = nefis.cnefis.crenef(dat_file, def_file, coding, ac_type)
    os.unlink(dat_file)
    os.unlink(def_file)
    log_error(error)
    assert error == 0, "crenef should return error 0"


def test_defelm(nefis_file):

    elm_name = 'Element 1'
    elm_type = 'character'
    elm_single_byte = 20
    elm_quantity = 'names'
    elm_unit = '[-]'
    elm_description = 'Discharge station names'
    elm_count = 1
    elm_dimensions = np.arange(elm_count, dtype='int32').reshape(elm_count)
    elm_dimensions[0] = 20

    error = nefis.cnefis.defelm(
        nefis_file,
        elm_name,
        elm_type,
        elm_single_byte,
        elm_quantity,
        elm_unit,
        elm_description,
        elm_count,
        elm_dimensions
    )
    log_error(error)
    assert error == 0, "expected error 0 for creating element"


def test_defelm2(nefis_file):
    elm_name = 'Elm 2'
    elm_type = 'REAL'
    elm_single_byte = 4
    elm_quantity = 'discharge'
    elm_unit = '[m^3/s]'
    elm_description = 'First element generated by Python'
    elm_count = 2
    elm_dimensions = np.arange(elm_count, dtype='int32').reshape(elm_count)
    elm_dimensions[0] = 20
    elm_dimensions[1] = 5

    error = nefis.cnefis.defelm(
        nefis_file,
        elm_name,
        elm_type,
        elm_single_byte,
        elm_quantity,
        elm_unit,
        elm_description,
        elm_count,
        elm_dimensions
    )
    log_error(error)
    assert error == 0, "expected error 0 for creating element"
